plugins {
	id "java"
	id "idea"
	id "com.github.andygoossens.modernizer" version "1.11.0"

	// TODO: Cannot update to 2.5.0 because then the git repo is not found
	id "com.gorylenko.gradle-git-properties" version "2.4.2"
	id "org.springframework.boot" version "${spring_boot_version}"
	id "io.spring.dependency-management" version "1.1.7"
	id "com.github.ben-manes.versions" version "0.52.0"
}

group = "de.tum.cit.aet.thesis"
version = "4.2.0"
description = "Thesis Management"

springBoot {
	mainClass = "de.tum.cit.aet.thesis.ThesisManagementApplication"
}

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

repositories {
	mavenCentral()
}

dependencies {
	implementation "org.springframework.boot:spring-boot-starter-data-jpa:${spring_boot_version}"
	implementation "org.springframework.boot:spring-boot-starter-web:${spring_boot_version}"
	implementation "org.springframework.boot:spring-boot-starter-validation:${spring_boot_version}"
	implementation "org.springframework.boot:spring-boot-starter-mail:${spring_boot_version}"
	implementation "org.springframework.boot:spring-boot-starter-webflux:${spring_boot_version}"
	implementation "org.springframework.boot:spring-boot-starter-security:${spring_boot_version}"
	implementation "org.springframework.boot:spring-boot-starter-oauth2-client:${spring_boot_version}"
	implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server:${spring_boot_version}"
	implementation "org.springframework.boot:spring-boot-starter-thymeleaf:${spring_boot_version}"
	implementation "org.springframework.boot:spring-boot-starter-actuator:${spring_boot_version}"

	// use the latest version to avoid security vulnerabilities
	implementation "org.springframework:spring-aop:${spring_framework_version}"
	implementation "org.springframework:spring-aspects:${spring_framework_version}"
	implementation "org.springframework:spring-beans:${spring_framework_version}"
	implementation "org.springframework:spring-context:${spring_framework_version}"
	implementation "org.springframework:spring-context-support:${spring_framework_version}"
	implementation "org.springframework:spring-core:${spring_framework_version}"
	implementation "org.springframework:spring-expression:${spring_framework_version}"
	implementation "org.springframework:spring-jcl:${spring_framework_version}"
	implementation "org.springframework:spring-jdbc:${spring_framework_version}"
	implementation "org.springframework:spring-messaging:${spring_framework_version}"
	implementation "org.springframework:spring-orm:${spring_framework_version}"
	implementation "org.springframework:spring-tx:${spring_framework_version}"
	implementation "org.springframework:spring-webmvc:${spring_framework_version}"
	implementation "org.springframework:spring-web:${spring_framework_version}"
	implementation "org.springframework:spring-webflux:${spring_framework_version}"
	implementation "org.springframework:spring-websocket:${spring_framework_version}"

	developmentOnly "org.springframework.boot:spring-boot-devtools:${spring_boot_version}"
	developmentOnly "org.springframework:spring-aop:${spring_framework_version}"
	developmentOnly "org.springframework:spring-beans:${spring_framework_version}"
	developmentOnly "org.springframework:spring-context:${spring_framework_version}"
	developmentOnly "org.springframework:spring-core:${spring_framework_version}"
	developmentOnly "org.springframework:spring-expression:${spring_framework_version}"
	developmentOnly "org.springframework:spring-jcl:${spring_framework_version}"

	// Avoid outdated version of netty to prevent security issues
	implementation("io.netty:netty-buffer") { version { 				strictly netty_version } }
	implementation("io.netty:netty-codec") { version { 					strictly netty_version } }
	implementation("io.netty:netty-codec-dns") { version { 				strictly netty_version } }
	implementation("io.netty:netty-codec-http") { version { 			strictly netty_version } }
	implementation("io.netty:netty-codec-http2") { version { 			strictly netty_version } }
	implementation("io.netty:netty-codec-socks") { version { 			strictly netty_version } }
	implementation("io.netty:netty-common") { version { 				strictly netty_version } }
	implementation("io.netty:netty-resolver") { version { 	    		strictly netty_version } }
	implementation("io.netty:netty-resolver-dns") { version { 			strictly netty_version } }
	implementation("io.netty:netty-transport") { version { 				strictly netty_version } }
	implementation("io.netty:netty-transport-native-epoll") { version {	strictly netty_version } }
	implementation("io.netty:netty-handler") { version { 				strictly netty_version } }
	implementation("io.netty:netty-handler-proxy") { version { 			strictly netty_version } }
	
	// Avoid outdated version to prevent security issues
	implementation("net.minidev:json-smart") { version { 				strictly "2.5.2" } }

	implementation "org.liquibase:liquibase-core:4.32.0"
	implementation "org.postgresql:postgresql:42.7.7"

	implementation "commons-io:commons-io:2.19.0"
	implementation "com.github.vladimir-bukhtoyarov:bucket4j-core:8.0.1"
	implementation "org.mnode.ical4j:ical4j:4.1.1"
	implementation "com.itextpdf:itext-core:9.2.0"
	implementation "com.itextpdf:html2pdf:6.2.0"
	implementation "com.auth0:java-jwt:4.5.0"

	implementation "ch.qos.logback:logback-classic:${logback_version}"
	implementation "ch.qos.logback:logback-core:${logback_version}"

	// use newest version of commons-compress to avoid security issues through outdated dependencies
	implementation "org.apache.commons:commons-compress:1.27.1"

	compileOnly "org.projectlombok:lombok:1.18.38"
	annotationProcessor "org.projectlombok:lombok:1.18.38"

	testImplementation("org.springframework.boot:spring-boot-starter-test:${spring_boot_version}") {
		exclude group: "org.junit.vintage", module: "junit-vintage-engine"
		exclude group: "com.vaadin.external.google", module: "android-json"
		exclude group: "org.xmlunit", module: "xmlunit-core"
	}

	testImplementation "org.springframework:spring-test:${spring_framework_version}"

	testImplementation "org.mockito:mockito-core:5.18.0"
	testImplementation "org.mockito:mockito-junit-jupiter:5.18.0"

	testImplementation "org.testcontainers:testcontainers:${test_container_version}"
	testImplementation "org.testcontainers:junit-jupiter:${test_container_version}"
	testImplementation "org.testcontainers:jdbc:${test_container_version}"
	testImplementation "org.testcontainers:database-commons:${test_container_version}"
	testImplementation "org.testcontainers:postgresql:${test_container_version}"

	testImplementation "org.junit.jupiter:junit-jupiter:${junit_version}"
	testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_version}"
	testImplementation "org.junit.jupiter:junit-jupiter-engine:${junit_version}"
	testImplementation "org.junit.jupiter:junit-jupiter-params:${junit_version}"

	// NOTE: make sure this corresponds to the version used for JUnit in the testImplementation
	testImplementation "org.junit.platform:junit-platform-commons:${junit_platform_version}"
	testImplementation "org.junit.platform:junit-platform-engine:${junit_platform_version}"
	testRuntimeOnly "org.junit.platform:junit-platform-launcher:${junit_platform_version}"
}

springBoot {
	buildInfo()
}

test {
	useJUnitPlatform()

	maxParallelForks = 1
	forkEvery = 0

	testLogging {
		events "PASSED", "FAILED", "SKIPPED"
	}
	testLogging.showStandardStreams = true
	systemProperty "spring.profiles.active", "test"
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << "-Xlint:deprecation"
    options.compilerArgs << "-parameters"
}

def isNonStable = { String version ->
	def stableKeyword = ["RELEASE", "FINAL", "GA"].any { it -> version.toUpperCase().contains(it) }
	def regex = /^[0-9,.v-]+(-r)?$/
	return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
	rejectVersionIf {
		isNonStable(it.candidate.version)
	}

	rejectVersionIf {
		isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
	}
}

// Available commands:
//
// Find dependency updates:    ./gradlew dependencyUpdates -Drevision=release
// Test:                       ./gradlew test
// Build:                      ./gradlew build -x test
// Run:						   ./gradlew bootRun
